---
title: "COVID proteomics: neutrophils"
author:
  - name: Marek Gierlinski
    affiliations: Data Analysis Group
    note: "Creator of this report"
  - name: Merete Long
    affiliation: Molecular and Clinical Medicine, School of Medicine
  - name: James Chalmers
    affiliation: Molecular and Clinical Medicine, School of Medicine
date: today
date-format: "D MMMM YYYY"
execute:
  echo: false
  cache: true
  warning: false
format:
  html:
    theme:
      - journal
      - report.scss
    toc: true
editor: source
self-contained: true
---

```{r libraries, cache=FALSE}
suppressPackageStartupMessages({
  library(targets)
  library(tidyverse)
  library(flextable)
  library(gt)
  library(UpSetR)
  library(DT)
})
```

```{r functions}
myDT <- function(d) {
  datatable(d, class = "table-condensed table-striped table-bordered", style = "bootstrap") |> 
    formatStyle(columns = colnames(d), fontSize = '90%')
}
N <- function(n) prettyNum(n, big.mark = ",")
```

# Proposal

## STOP-COVID19: SUPERIORITY TRIAL OF PROTEASE INHIBITION IN COVID-19

Multi-centre prospective, randomized placebo-controlled trial in patients presenting to hospital with PCR confirmed COVID-19 (SARS-CoV-2 infection). Planned Sample Size was 300 across the UK. Treatment duration was 28 days, with 29 days follow-up.

#### Study rationale and hypothesis

COVID-19 can cause substantial morbidity and mortality. Mortality in acute respiratory distress syndrome (ARDS) correlates directly with the extent of neutrophilia in the lung. Both human clinical data and murine studies demonstrate a key role for neutrophils in ARDS. Neutrophil proteases and particularly neutrophil elastase are believed to be central to the neutrophil induced lung damage.

Neutrophil elastase, proteinase-3 and cathepsin-G are activated during neutrophil maturation in the bone marrow through dipeptidyl peptidase 1 (DPP1; also known as cathepsin C), which removes the N-terminal dipeptide sequence of neutrophil serine proteases allowing active enzymes to be packaged into granules prior to release of neutrophils into the circulation. Brensocatib (INS1007, formerly AZD7986) is an orally delivered selective, competitive, and reversible inhibitor of DPP1. Brensocatib has been shown to inhibit neutrophil serine protease activity in blood in both animal models and healthy volunteers and in the airways of patients with the chronic respiratory disease Bronchiectasis.

**We hypothesised that Brensocatib, by blocking damaging neutrophil proteases, would reduce the incidence of acute lung injury and acute respiratory distress syndrome (ARDS) in patients with COVID-19, thereby resulting in improved clinical outcomes.**

### Study overview

In total 144 participants were enrolled in Dundee, and 17 enrolled in Sheffield, both of these sites obtained longitudinal research blood samples from participants whilst hospitalised, for exploratory analyses to better understand Brensocatib mechanisms of action. Participants were also invited to return for sampling a day 29 if discharged, resulting in larger sample numbers at day 29 than at intermediate timepoints. Isolated peripheral blood neutrophils across various timepoints have been processed and analysed with LC-MS, utilising Spectronaut software for protein identification.

### Major questions for initial proteomic data analysis

-   Does treatment with Brensocatib alter the COVID-19 peripheral blood neutrophil proteome across the study period, compared with Placebo treatment?
-   Do factors such as age, gender, or time from symptom onset influence responses to Brensocatib within the neutrophil proteome?
-   If possible, the above would be performed in the study population who completed the trial (completed=1), and then would also be performed subsequently as an intention-to-treat analysis, including all participants (both completed=1 and completed=0)

### Data Analysis Group Quotation Reference: 150422-JC03

Project Title: Neutrophil/PBMC proteomic analysis

#### PI Details

Name Prof. James Chalmers Division Molecular and Clinical Medicine School School of Medicine Email [j.chalmers\@dundee.ac.uk](mailto:j.chalmers@dundee.ac.uk){.email}

#### Background

From May 2020 we carried out a trial of dipeptidyl peptidase-1/Cathepsin-C inhibitor in hospitalised patients with COVID-19. In total enrolled 144 participants in Dundee. We have data from around 250 neutrophil samples across various timepoints which have been processed and analysed with LC-MS, subsequently utilising Spectronaut software for protein identification. Comparisons of brensocatib vs. placebo groups at 4-5 timepoints is requested, with possible sub-analyses for e.g. age and gender, time from symptom onset. Batch correction across 3-5 batches would also be needed, as significant batch effects were found in other analyses of the proteomics data. If possible we would also do the same thing for the PBMC samples later, however the neutrophil data would be a first priority.

#### Description of Proposed Work

This is a large and complex experiment, so would be better to cost in stages. The first stage would include:

-   overview of the data
-   quality control
-   multidimensional analysis: finding important and non-important factors, dealing with batch effects
-   differential abundance on selected conditions (e.g. day 29 vs day 1, drug vs placebo at a given time point)
-   multivariate differential abundance on time + treatment + batch, etc. This might not work if data are not "clean", e.g., if timing behaviour is complex (i.e. not a simple trend)
-   simple timing analysis, identifying proteins consistently changing up or down
-   providing a simple interactive tool to look at the above results

# Data

## Spectronaut

Raw data were analysed with [Spectronaut](https://biognosys.com/software/spectronaut). I have received two files: one is the original output from Spectronaut (a TSV file in long format), the other is a file processed by collaborators (a CSV file in wide format). I did initial analysis using the processed file (I got it first), but then switched to the original file.

The file I used is a protein quantification file and it contains the following columns:

```{r}
#| label: tbl-specronaut-columns
#| tbl-cap: Column names in the spectronout file.
tar_read(spectronaut_columns) |> 
  gt() |> 
  cols_width(column ~ px(250))
```

We need file name (corresponding to the sample name), protein accessions, descriptions and quantity - raw protein intensity. All q-values are small (the largest q-value is `r signif(tar_read(max_qvalue), 2)`).

## Contaminants

The Spectronaut file does not have contaminants removed, so the [MaxQuant contaminant FASTA file](http://www.coxdocs.org/doku.php?id=maxquant:start_downloads.htm) was used to filter out contaminant proteins.

## Normalisation

Raw data are normalised to the median in each sample.

# Experiment

## Batches

We have `r tar_read(n_samples)` samples. There are two treatments (brensocatib and placebo), several time points and batches. @fig-counts-batch shows a summary of the sample numbers.

```{r}
#| label: fig-counts-batch
#| fig-cap: Summary of sample count per day and per batch.
#| fig-width: 6
#| fig-height: 4
tar_read(fig_counts_batch) 
```

We see that batch 1 and 2 are very small (we are going to ignore these data when taking batch effects into account) and days 4 and 15 have little data available. More details in tabular form:

### Treatment and day

```{r}
#| label: tbl-count-per-treatment-day
#| tbl-cap: Sample counts per treatment and per day.
tar_read(metadata_covid) |>
  group_by(treatment, day) |> 
  tally() |>
  ungroup() |> 
  pivot_wider(id_cols = treatment, names_from = day, values_from = n) |> 
  gt() |> 
  tab_spanner(
    label = "Day",
    columns = c(-treatment) 
  ) |> 
  cols_width(-treatment ~ px(50)) |> 
  tab_options(column_labels.font.weight = "bold") 
```

### Batch and day

```{r meta_batch}
#| label: tbl-count-per-batch-day
#| tbl-cap: Sample counts per batch and per day.
tar_read(metadata_covid) |>
  group_by(batch, day) |> 
  tally() |> 
  ungroup() |> 
  mutate(
    n = as.character(n)
  ) |> 
  pivot_wider(id_cols = batch, names_from = day, values_from = n, values_fill = "-", names_sort = TRUE) |> 
  gt() |> 
  tab_spanner(
    label = "Day",
    columns = c(-batch) 
  ) |> 
  cols_width(-batch ~ px(50)) |> 
  tab_options(column_labels.font.weight = "bold") |> 
  as_raw_html()
```

## MS runs

```{r}
#| label: fig-ms-runs
#| fig-cap: As in @fig-counts-batch, but colours encode individual MS runs.
#| fig-width: 6
#| fig-height: 4
tar_read(fig_counts_run) 
```

MS runs are subsets of batches:

```{r}
#| label: tbl-count-per-run-day
#| tbl-cap: Sample counts per MS run and per day.
tar_read(metadata_covid) |>
  group_by(batch, run_index) |> 
  tally() |> 
  ungroup() |> 
  mutate(
    n = as.character(n)
  ) |> 
  pivot_wider(id_cols = batch, names_from = run_index, values_from = n, values_fill = "-", names_sort = FALSE) |> 
  gt() |> 
  tab_spanner(
    label = "Run index",
    columns = c(-batch) 
  ) |> 
  cols_width(-batch ~ px(50)) |> 
  tab_options(column_labels.font.weight = "bold") |> 
  as_raw_html()
```

## Full table of the experimental design

Please note that sample naming in this report (`sample`) differs from the file/sample naming in the Spectronaut file (`data_col`). New sample name consists of the following:

-   treatment (`P` for placebo, `B` for brensocatib)
-   batch number (1-5)
-   day (01, 04, 08, 15, 29)
-   'replicate' number (1 .. n, within given treatment/batch/day)

```{r}
m <- tar_read(metadata_covid) |> 
  select(sample, data_col, batch, run_index, participant_id, treatment, day, age, sex, completion)
DT::datatable(m) |>
  DT::formatStyle(columns = colnames(m), fontSize = '80%')
```

# Participants

## Table of participants

```{r}
DT::datatable(tar_read(participants)) 
```

## Distribution of attributes

```{r}
#| label: fig-participant-stats
#| fig-cap: Overview of pariticipants attributes.
#| fig-width: 11
#| fig-height: 3.5
tar_read(fig_participat_stats) 
```

# Overview

## Protein detection

Not all proteins are detected across all `r tar_read(n_samples)` samples. @fig-detection shows

-   in how many samples each protein was detected, starting from the highest number
-   how many proteins are detected in each sample, starting from the highest number

```{r}
#| label: fig-detection
#| fig-cap: Protein detection count as a function of protein (A) and sample (B). The sudden drop in protein detecton in panel B is due to sample D5_01-45 (see @tbl-bad-sample).
#| fig-width: 10
#| fig-height: 4
tar_read(fig_detection)
```

There is a dramatic drop at the end of the right panel, which is due to one sample with very few proteins detected. This sample is removed from further analysis. Here is information about the bad sample:

```{r}
#| label: tbl-bad-sample
#| tbl-cap: Bad sample.
tar_read(metadata_covid) |> 
  filter(bad) |> 
  select(sample, data_col, batch, participant_id, treatment, day, age, sex, completion) |> 
  gt()
```

## Abundance distribution

@fig-abundance-distribution shows distribution of raw and normalised protein abundance.

![Distribution of raw (A) and normalised (B) protein intensities.](../fig/kernels.png){#fig-abundance-distribution width=70%}

## Clustering

@fig-clustering-circular shows clustering of all samples. Colours represent batches. We can see that batch effects dominate this experiment. Hierarchical clustering was calculated based on logarithm of normalised intensities, with Euclidean distance, using complete linkage method.

```{r}
#| label: fig-clustering-circular
#| fig-cap: Dendrogram of samples, based on logarithm of normalised intensity. 
#| fig-width: 8
#| fig-height: 12
tar_read(fig_clustering_circular) 
```

## Correlation matrix

@fig-cormat shows Pearson's correlation coefficient for all pairs of samples. It is a bit messy. The bad sample is clearly visible as a dark row and column. The figure is based on logarithm of normalised intensities.

```{r}
#| label: fig-cormat
#| fig-cap: Correlation matrix for all samples.
#| fig-width: 10
#| fig-height: 10
tar_read(fig_cormat)
```

## PCA

@fig-pca shows first two principal components, based on logarithm of normalised intensities. The bad replicate stands out.

```{r}
#| label: fig-pca
#| fig-cap: PCA decomposition based on logarithm of normalised intensity.
#| fig-width: 6
#| fig-height: 5
tar_read(fig_pca)
```

## UMAP

UMAP is dimensionality reduction method, an alternative to PCA. It retains structure of high-dimensional data when embedded in two dimensions. Shown in @fig-umap.

```{r}
#| label: fig-umap
#| fig-cap: UMAP decomposition based on logarithm of normalised intensity.
#| fig-width: 6
#| fig-height: 5
tar_read(fig_umap) 
```




# Differential abundance

## Description

### From limma R vignette

For differential expression we use `limma`. It used an empirical Bayes method to squeeze the peptide-wise residual variances towards a common value (or towards a global trend) (Smyth, 2004; Phipson et al, 2016). The degrees of freedom for the individual variances are increased to reflect the extra information gained from the empirical Bayes moderation, resulting in increased statistical power to detect differential expression.

For more information see [Ritchie et al. 2015](https://academic.oup.com/nar/article/43/7/e47/2414268).

### In simpler words

`limma` uses a t-test, which is moderated by borrowing data across all peptides. A global variance model is built and moderation squeezes variances towards this global trend. Extreme variances (either large or small) become less extreme, which makes the test more robust to random outliers.

## Full model

First, we analyse all data using a 'full' model taking into account all potential effects:

`~ treatment + day + batch + age_group + sex`

The differential abundance is calculated with respect to the baseline:

-   treatment = placebo
-   day = 1
-   batch = 3
-   age_group = <50
-   sex = M

In this model, and models below, bad replicate and data from batch 1 and 2 are ignored.

@fig-ma-full shows MA plots for each of the coefficients. Each panel corresponds to one value of one coefficient, showing differential abundance with respect to the baseline.

```{r}
#| label: fig-ma-full
#| fig-cap: MA plots of the full model `~ treatment + day + batch + age_group + sex`. Black points indicate proteins with significant differential abundance, defined as FDR < 0.01.
#| fig-width: 10
#| fig-height: 10
tar_read(fig_ma_full) 
```

Note, that with dozens of samples available even small changes become statistically significant, so we need to pay attention to the effect size (log fold change).

The biggest effect comes from batch differences and time points. The brensocatib effect is week, though it shows a few differentially abundant (DA) proteins, these might be flukes. We are going to look at brensocatib effect in details later. Similarly, other factors (age and sex) have very week effect on DA.

## Batch effect

Next, we look at the difference between batches 3, 4 and 5. For this, a simple model with only batch as effect was created and three contrasts calculated. The results are shown in @fig-ma-batch.

```{r}
#| label: fig-ma-batch
#| fig-cap: MA plots to show the batch effects. The model was `~ 0 + batch` and contrasts between batches 3, 4 and 5 (denoted as x3, x4 and x5) were calculated.
#| fig-width: 8
#| fig-height: 3
tar_read(fig_ma_batch)
```

@fig-batch-examples shows a couple of examples to demonstrate the strength of batch effect. MS run indeces are also included.

```{r}
#| label: fig-batch-examples
#| fig-cap: Examples of two proteins strongly affected by batch effects.
#| fig-width: 9
#| fig-height: 5
tar_read(fig_batch_examples)
```


### Gene set enrichment for batch effect

Out of curiosity we check if there are any functionally enriched groups of genes, responsible for batch effect.

```{r}
tar_load(gse_batch5)
map_dfr(names(gse_batch5), function(ont) {
  gse_batch5[[ont]] |> 
    filter(fdr < 0.01) |> 
    add_column(ontology = ont, .before = 1) |> 
    mutate(across(c(p_value, fdr, nes), ~signif(.x, 3))) |> 
    select(ontology, term_id, term_name, fdr, nes, size, contrast) |> 
    mutate(ontology = recode(ontology, go = "GO", re = "Reactome", kg = "KEGG"))
}) |> 
  gt()
```

## Day 1

We select day 1 data only and consider a model

`~ treatment + batch + age_group + sex`

Results are shown in @fig-ma-day1.

```{r}
#| label: fig-ma-day1
#| fig-cap: MA plots of the model `~ treatment + batch + age_group + sex` at day 1 only.
#| fig-width: 8
#| fig-height: 8
tar_read(fig_ma_day1) 
```

Not surprisingly there is no brensocatib effect on day 1.

## Day 29

Now the same for day 29 (@fig-ma-day29). Note that there is no batch 3 in day 29 data.

```{r}
#| label: fig-ma-day29
#| fig-cap: MA plots of the model `~ treatment + batch + age_group + sex` at day 29 only.
#| fig-width: 8
#| fig-height: 5.5
tar_read(fig_ma_day29) 
```

A lot of proteins are 'significant' in brensocatib effect, but the fold change is not any different from day 1. We need to be careful interpreting these results. Again, they are completely dominated by batch effects.

## Day 29 and batch effects

There are two batches within day 29: batch 4 and batch 5. As demonstrated above, batch effects are strong. Here, two data subsets are considered, for batch 4 and batch 5 separately (both for day 29). The model is

`~ treatment + age_group + sex`

Results are shown in @fig-ma-day29-batch45.

```{r}
#| label: fig-ma-day29-batch45
#| fig-cap: MA plots for differential abundance with model `~ treatment + age_group + sex`, performed on batch 4 and batch 5 separately.
#| fig-width: 8
#| fig-height: 12
g1 <- tar_read(fig_ma_day29_b4) + ggtitle("Batch 4")
g2 <- tar_read(fig_ma_day29_b5) + ggtitle("Batch 5")
cowplot::plot_grid(g1, g2, ncol = 1, align = "v")
```


 @fig-upset-day29 shows overlap for DA proteins (FDR \< 0.01) for day 29: batch 4, batch 5 and both:

```{r}
#| label: fig-upset-day29
#| fig-cap: UpSet plot to compare differential abundance (between brensocatib and placebo) results for batch 4, batch 5 and both batches combined, at day 29. Each set consists with DA proteins (FDR < 0.01).
#| fig-width: 8
#| fig-height: 5
upset(fromList(tar_read(ups_day29))) 
```

The only proteins in agreement between three selections are listed in @tbl-dal-day29-treatment-best with their normalised abundances shown in @fig-day29-best.

```{r}
#| label: tbl-dal-day29-treatment-best
#| tbl-cap: DA proteins from overlap between results from batch 4 and 5.
tar_read(dal_day29_treatment_best) |> 
  select(Accession = protein_accessions, Description = protein_descriptions, `Gene symbol` = gene_names) |> 
  gt()
```

Here are abundances from these proteins:

```{r}
#| label: fig-day29-best
#| fig-cap: Normalised abundance for DA proteins from overlap between results from batch 4 and 5.
#| fig-width: 8
#| fig-height: 4
tar_read(fig_day29_best)
```

## The outlier

There is one persistent outlier keeping high levels of AZU1 and CTSG on day 29, seemingly unaffected by the brensocatib. It is the same participant, ID 1132, one of the youngest in the cohort, see @tbl-outlier and @fig-outlier.

```{r}
#| label: tbl-outlier
#| tbl-cap: Outlier in DA results.
tar_read(metadata_covid) |> 
  filter(participant_id == 1132) |> 
  select(participant_id, age, sex, time_from_symptoms, completion) |> 
  distinct() |> 
  gt()
```


```{r}
#| label: fig-outlier
#| fig-cap: Normalised abundance for DA proteins from overlap between results from batch 4 and 5, for the outlier (see @tbl-outlier) only.
#| fig-width: 8
#| fig-height: 4
tar_read(fig_day29_best_part1132)
```





# Per participant DA

Protein measurements at different time points are not independent, as they come from the same individuals. @fig-participants-1-29 shows which participants gave samples at which days:

```{r}
#| label: fig-participants-1-29
#| fig-cap: Graphical summary of sample delivery from all participants, both on brensocatib and placebo. Colours show batches. Black lines indicate participants delivering samples both on day 1 and 29.
#| fig-width: 10
#| fig-height: 5
tar_read(fig_participant_1_29)
```

We can use these data to link day 1 and 29 measurements to create a paired model. For this, a log-ratio of intensity at day 29 to day 1 is calculated for each participant $i$ and each protein $j$:

$$R_{ij} = \log_2 \left(\frac{I_{ij,29}}{I_{ij,1}}\right)$$

## Normalisation

If there is no change in protein abundance between days 1 and 29, $R_{ij}$ should be close to 0. @fig-lograt-dist shows distribution of $R_{ij}$ for each participant. Some of them have $R$ distribution shifted towards positive or negative values. Here we assume that there is no massive change in expression between days 1 and 29, so we normalised these data using quantile normalisation before further processing, as shown in @fig-lograt-dist-norm.

```{r}
#| label: fig-lograt-dist
#| fig-cap: Distributon of R for each participant. Colours code batch at day 1 and day 29.
#| fig-width: 8
#| fig-height: 10
tar_read(fig_lograt_dist)
```

```{r}
#| label: fig-lograt-dist-norm
#| fig-cap: Distributon of R for each participant, after quantile normalisation. Colours code batch at day 1 and day 29.
#| fig-width: 8
#| fig-height: 10
tar_read(fig_lograt_dist_norm)
```

## Comparing day 1 and 29 for brensocatib and placebo separately

First, we look at differential abundance between day 1 and 29, for brensocatib and placebo separately. We perform a one-sample test for each protein with the null hypothesis of $R = 0$. We use `limma` to control variance between proteins. This gives differential abundance in time (days 1 and 29), corrected for interdependence (participants).

```{r}
tar_load(gse_dl)
tb <- map_dfr(names(gse_dl), function(ont) {
  gse_dl[[ont]] |> 
    filter(fdr < 0.01) |> 
    add_column(ontology = ont, .before = 1) |> 
    mutate(across(c(p_value, fdr, nes), ~signif(.x, 3))) |> 
    select(ontology, term_id, term_name, p_value, nes, size, contrast) |> 
    mutate(ontology = recode(ontology, go = "GO", re = "Reactome", kg = "KEGG"))
})
```

### Volcano plots

```{r}
#| label: fig-volcano-dl
#| fig-cap: Differential abundance results of paired log-ratio between day 1 and 29. 
#| fig-width: 7
#| fig-height: 3
tar_read(fig_volcano_dl)
```

Below, we show results for gene-set enrichment for placebo and brensocatib. Not surprisingly, the top terms are response to virus. These proteins are changin down from day 1 to day 29, as most of the immune response was at the beginning of infection.

### Placebo set enrichment

```{r}
DT::datatable(tb |> filter(contrast == "Placebo") |> select(-contrast))
```

### Brensocatib set enrichment

```{r}
DT::datatable(tb |> filter(contrast == "Brensocatib") |> select(-contrast))
```

## Brensocatib vs placebo

In the next step, we compare day 1-to-29 change between brensocatib and placebo. For this, we build a model `~ treatment + age_group + sex`, based on log-ratios $R_{ij}$ between days 1 and 29.

```{r}
#| label: fig-volcano_dl_drug_vs_placebo
#| fig-cap: MA plots for differential abundnace model `~ treatment + age_group + sex` from day 1-to-29 log-ratios.
#| fig-width: 8
#| fig-height: 5.5
tar_read(fig_volcano_dl_drug_vs_placebo)
```

The significant proteins are shown in @fig-dl-drug-vs-placebo and @fig-timeline-drug-vs-placebo.

```{r}
#| label: fig-dl-drug-vs-placebo
#| fig-cap: Significant (FDR < 0.01) proteins for DA between brensocatib and placebo based on paired log-ratio of day 1 and 29.
#| fig-width: 10
#| fig-height: 8
tar_read(fig_dl_drug_vs_placebo)
```

```{r}
#| label: fig-timeline-drug-vs-placebo
#| fig-cap: Significant (FDR < 0.01) proteins for DA between brensocatib and placebo based on paired log-ratio of day 1 and 29. Points indicate the mean and error bars show 95% confidence intervals.
#| fig-width: 10
#| fig-height: 8
tar_read(fig_timeline_drug_vs_placebo) 
```


## Gene set enrichment

Gene set enrichment takes genes/proteins ordered by log-fold-change (ignoring p-values and significance) and looks for functional terms that are skewed towards small or large logFC. For example, GO-term "oxygen carrier activity" in the figure below is assigned to several proteins (haemoglobin and histone related) that all are down-regulated in age group over 80. None of these proteins is significant in simple differential abundance, but as a functional group they become significant, as they all are down-regulated.

Here we use fold changes from day 29 selection, for treatment and age contrasts (batch excluded). The baseline is treatment = placebo and age_group = '\<50'. Contrast names are at the top of each panel. For example `age_group>80` means comparison between `>80` and the baseline `<50`.

@fig-gse-examples shows volcano plots for various contrasts and functional terms, with term-annotated proteins highlighted.

![Volcano plots for significant functional terms, for day29, with genes annotated with these terms marked in black.](../fig/gse_examples.png){#fig-gse-examples}

Below is the full result of gene-set-enrichment procedure (excluding batch effects). The FDR level was set to 0.05. NES stands for normalised effect size and tells you how far the group of proteins annotated with this term is skewed in logFC. Small and large NES means proteins are predominantly down- or up-regulated, respectively. The last column contains up to 10 top most changing genes (in the same direction as NES).

```{r}
#| label: tbl-gse-day29
#| tbl-cap: Significant terms for GSE on day 29.
tar_read(gse_da_day29_sig) |> 
  select(-ontology) |> 
  DT::datatable()
```




# Resources

-   [Interactive data explorer](https://shiny.compbio.dundee.ac.uk/private/marek_covid_prot_neutrophils/lograt)
-   [Download DE results]()

## Session info

```{r session_info}
sessionInfo()
```
